package com.ibm.maximo.technician.testcases;

import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;

import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;

import com.google.gson.Gson;
import com.ibm.maximo.automation.mobile.AbstractAutomationFramework;
import com.ibm.maximo.automation.mobile.FrameworkFactory;
import com.ibm.maximo.automation.mobile.api.MaximoApi;
import com.ibm.maximo.automation.mobile.api.json.WorkOrder;
import com.ibm.maximo.technician.framework.TechnicianTest;
import com.ibm.maximo.technician.page.MySchedulePage;
import com.ibm.maximo.technician.page.ReportWorkPage;
import com.ibm.maximo.technician.page.WorkOrderDetailsPage;
import com.ibm.maximo.technician.setupdata.SetupData;
import com.ibm.maximo.technician.setupdata.SetupData.WoStatus;
import com.ibm.maximo.technician.setupdata.SetupData.WorkType;

/*
 * MAXMOA-5173:[MobileAutomation] Technician (RBA) - Edit Labor Hours if not approved
 * Scenario 39 : testcases/WorkorderDetailsPage/TC_WODetailsAssetLocationMeters.md
 * */


public class EditLaborOptionsInsideSettingsCheckedFromOrganization extends TechnicianTest{
	
	private final Logger logger = LoggerFactory.getLogger(EditLaborOptionsInsideSettingsCheckedFromOrganization.class);
	private AbstractAutomationFramework af;
	private TestSuite testSuite;
	private MaximoApi maximoApi;
	private String woNum, labor,timezone ;
	private WorkOrder newWorkOrder;
	private static final String WO_DESCRIPTION = "ANJ-TEST";
	private boolean apiCodeSuccess = false;
	
	@BeforeClass(alwaysRun = true)
	@Parameters({ "configPath" })
	public void setup(String configPath) throws Exception {
		logger.info("********************EditLaborOptionsInsideSettingsCheckedFromOrganization*********************************");
		this.af = FrameworkFactory.get();
		Properties properties = new Properties();
		try {
			InputStream in = new BufferedInputStream(new FileInputStream(configPath));
			properties.load(in);
			timezone = properties.getProperty("capabilities.browserstack.timezone") != null ? properties.getProperty("capabilities.browserstack.timezone") : "UTC";
			labor = properties.getProperty("system.username");
			maximoApi = new MaximoApi();
			maximoApi.setMaximoServer(properties.getProperty("system.maximoServerUrl"),
					properties.getProperty("system.maximoAPIKey"));
			masServer = properties.getProperty("system.masServer");
			// timezone is set in default information of user
			defaultInformationOfUserTimeZone(timezone, labor);
			createDefaultObjects();
			//to check the inside labor
			setSystemSettingsForInsideLabor("1");
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (!apiCodeSuccess) {
			logger.info("stopped framework and quit as API failed = " + apiCodeSuccess);
			FrameworkFactory.stopAll();
		} else {
			login(af);
		}
	}

	@AfterClass(alwaysRun = true)
	public void teardown() throws Exception {
		logOut(af);
		// timezone is blank in default information of user
		defaultInformationOfUserTimeZone("",labor);
		// Change WO status to Completed
		logger.info("Changing work order status to COMP");
		setSystemSettingsForInsideLabor("0");
		maximoApi.changeStatus(newWorkOrder, WoStatus.COMP.toString());
		if (testSuite != null) {
			testSuite.teardown();
		}
	}
	
	
	@Test(groups = {"mobile" ,"desktop"}, description = "Verify when timer is off, labor is internal labor (vendor and contract is null) then organization settings (Labor options) = Automatically Approve Inside Labor Transactions is unchecked, then edit icon should be present", timeOut = 900000)
     public void verifyInsideLaborCheckedFromOrgSettings() throws Exception {
	 
		MySchedulePage assignedWorkPage = new MySchedulePage(af);
		WorkOrderDetailsPage woDetails = new WorkOrderDetailsPage(af);
		ReportWorkPage reportWorkPage = new ReportWorkPage(af);
		
		// Search the WO
		assertTrue(assignedWorkPage.search(woNum));
		// Click on selected workorder to open Work Order Details Page
		assignedWorkPage.openWorkOrderDetails();
							
		// Start the work order
		woDetails.clickStartWorkTimerButtonIcon();
		//Stop the timer 
		woDetails.clickStopWorkTimerButtonIcon();
		//click on send labor button 
		woDetails.clickSendLaborButton();
		//verify the edit icon is not present on the labor is present 
		assertFalse(reportWorkPage.isEditLaborButtonPresent(),"Labor edit icon should not display");
		//go to wo details page
		reportWorkPage.clickBackChevron();
		//go to the list page
		woDetails.clickBackChevron();
	}
		
	
	    // Generated by WCA for GP
		/**
		 * Create default objects
		 * 
		 * @throws Exception
		 */
		protected void createDefaultObjects() throws Exception {
			try {
			logger.info("Creating default objects");

			// Create a workorder
			logger.info("Creating a work order");
			String workOrderResult = maximoApi.retrieve(new WorkOrder(),
					"addid=1&internalvalues=1&action=system:new&addschema=1");
			newWorkOrder = new Gson().fromJson(workOrderResult, WorkOrder.class);
			newWorkOrder.setDescription(WO_DESCRIPTION);
			newWorkOrder.setWorkType(WorkType.PM.toString());
			newWorkOrder.setGLAccount(SetupData.GLDEBITACCT);
			maximoApi.create(newWorkOrder);
			woNum = newWorkOrder.getWoNum();
			logger.info("Work Order: {}" + woNum);

			// Change WO status to Approved
			logger.info("Changing work order status to APPR");
			maximoApi.changeStatus(newWorkOrder, WoStatus.APPR.toString());

			// Assignment with labor wilson
			maximoApi.addAssignmentLabor(newWorkOrder, labor);
			logger.info("Assignment added");
			
		    apiCodeSuccess = true;
          } catch (AssertionError e) {
        	logger.info(" SkipException apiCodeSuccess = " + apiCodeSuccess);
	        apiCodeSuccess = false;
	        throw new Exception("Test Setup API Failed,Stopping execution.");
      }

		}
	
	
		// Generated by WCA for GP
		// db query to check and uncheck the labor options (inside labor )
		/**
		 * Set system settings
		 */
		public void setSystemSettingsForInsideLabor(String value) {
			logger.info("check labor option - Automatically Approve Inside Labor Transactions");
			jdbcConnection.executeUpdateSQL("UPDATE MAXIMO.MAXVARS SET MAXIMO.MAXVARS.VARVALUE =  '" + value 
					+"' WHERE MAXIMO.MAXVARS.VARNAME ='LR_APPR_IN_LABOR' AND MAXIMO.MAXVARS.ORGID = '"+SetupData.ORGID+"'");
		}
		
		// Generated by WCA for GP
		/**
		 * Sets the system properties of the Default Information timezone.
		 *
		 * @param timezone the value to set , labor the value to set
		 */
		public void defaultInformationOfUserTimeZone(String timezone, String labor) {
			jdbcConnection.executeUpdateSQL("UPDATE MAXIMO.PERSON SET MAXIMO.PERSON.TIMEZONE = '" + timezone
					+ "' WHERE MAXIMO.PERSON.PERSONID = '" + labor + "'");
		}

}
