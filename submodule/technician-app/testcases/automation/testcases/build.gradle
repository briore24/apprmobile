/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "io.pry.gradle.offline_dependencies" version "0.5.0"
}

apply plugin: 'eclipse'

repositories {
  	if (project.gradle.startParameter.taskNames == ['updateOfflineRepository']){
		maven { url offlineRepositoryRoot }
  	} else {
  		jcenter()
  		mavenCentral()
    	mavenLocal()
    	maven { url 'https://jitpack.io' }
  	}
}

offlineDependencies {
	repositories {
		mavenCentral()
    	jcenter()
    	mavenLocal()
    	maven { url 'https://jitpack.io' }
	}	
	includeSources = true
	includeJavadocs = true
	includePoms = true
	includeIvyXmls = true
	includeBuildscriptDependencies = false
  
	configurations 'implementation', 'compile'
	buildScriptConfigurations 'classpath'
}

dependencies {
   // Use JUnit test framework
    implementation 'junit:junit:4.13.1'
    implementation group: 'org.testng', name: 'testng', version: '7.5'
    implementation group: 'com.browserstack', name: 'browserstack-local-java', version: '1.1.4'
    implementation 'com.github.appium:java-client:7.6.0'
    compile group: 'com.ibm.maximo.automation.mobile', name: 'mobile-automation-framework', version: project.findProperty('customVersion') ?: '1.0-SNAPSHOT'
    compile group: 'com.ibm.maximo.storybook', name: 'graphite-storybook-framework', version: project.findProperty('customVersion') ?: '1.0-SNAPSHOT'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.9'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation group: 'org.webjars', name: 'jquery', version: '3.5.1'
}

test {
    options {
        systemProperties(System.getProperties())
    }
    minHeapSize = "128m"
    maxHeapSize = "768m"
    maxParallelForks = 1
}



eclipse {
	project {
		name = 'technician-app-automation-testcases'
	}
    classpath {
        file {
            whenMerged {
                def mobileFrameworkClasspath = entries.find { it.path.contains('mobile-automation-framework-') && it.path.endsWith('.jar')}
                entries.remove mobileFrameworkClasspath
                entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("/mobile-automation-framework", null))

                def storybookFrameworkClasspath = entries.find { it.path.contains('graphite-storybook-framework-') && it.path.endsWith('.jar')}
                entries.remove storybookFrameworkClasspath
                entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder("/graphite-storybook-framework", null))
            }
        }
    }
    synchronizationTasks eclipseClasspath
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
               TestLogEvent.PASSED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams false


        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_ERROR,
                   TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showStandardStreams true

        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task runTests(type: JavaExec, dependsOn: 'classes') {
    // Detect if suite param was passed in
    def runSuite = project.hasProperty("suite")
    if(runSuite){
        def suiteToRun = project.getProperty("suite")
        main = 'org.testng.TestNG'
        classpath = files("./src/test/resources",
                        project.sourceSets.main.compileClasspath,
                        project.sourceSets.test.compileClasspath,
                        project.sourceSets.main.runtimeClasspath,
                        project.sourceSets.test.runtimeClasspath)
        args = ["-parallel",  "methods", "-threadcount", "1", "-d", "./build/test-output", "./src/test/resources/testng/"+suiteToRun]
    }else{
        println("Usage: gradle runTests -Psuite=testng.xml");
    }
}